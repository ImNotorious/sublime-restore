<snippet>
	<content><![CDATA[
const int N = 101;
int A[N][N], I[N][N];
void mul(int A[][N], int B[][N], int dim) {
    int res[dim+1][dim+1];
    for(int i=1; i<=dim; i++) {
        for(int j=1; j<=dim; j++) {
            res[i][j] = 0;
            for(int k=1; k<=dim; k++) {
                res[i][j] = (res[i][j] % MOD + ((A[i][k] % MOD) * (B[k][j] % MOD) % MOD)) % MOD;
            }
        }
    }
    for(int i=1; i<=dim; i++) {
        for(int j=1; j<=dim; j++) {
            A[i][j] = res[i][j];
        }
    }
}

void power(int A[][N], int dim, int n) {
    for(int i=1; i<=dim; i++) {
        for(int j=1; j<=dim; j++) {
            if(i == j) I[i][j] = 1;
            else I[i][j] = 0;
        }
    }
    while(n) {
        if(n%2) mul(I, A, dim), n--;
        else mul(A, A, dim), n/=2;
    }
    for(int i=1; i<=dim; i++) {
        for(int j=1; j<=dim; j++) {
            A[i][j] = I[i][j];
        }
    }
}

void printMat(int A[][N], int dim) {
    for(int i=1; i<=dim; i++) {
        for(int j=1; j<=dim; j++) {
            cout << A[i][j] << " ";
        }
        cout << endl;
    }
}

void matrixExp(int dim, int n) {
    power(A, dim, n);
    printMat(A, dim);
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>matrixExp</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
